#! /bin/sh
#
# php-fpm Startup script for the php-fpm daemon
#
# chkconfig: - 90 15
# description: php-fpm is a daemon for php cgi

# Source Red Hat function library.
. /etc/rc.d/init.d/functions

php_fpm_BIN=/usr/bin/php-cgi
php_fpm_CONF=/etc/php/php-fpm.conf
php_fpm_PID=<%= @pidfile %>


php_opts="--fpm-config $php_fpm_CONF"


wait_for_pid () {
        try=0

        while test $try -lt 35 ; do

                case "$1" in
                        'created')
                        if [ -f "$2" ] ; then
                                try=''
                                break
                        fi
                        ;;

                        'removed')
                        if [ ! -f "$2" ] ; then
                                try=''
                                break
                        fi
                        ;;
                esac

                echo -n .
                try=`expr $try + 1`
                sleep 1

        done

}

case "$1" in
        start)
                echo -n "Starting php_fpm "

                $php_fpm_BIN --fpm $php_opts

                if [ "$?" != 0 ] ; then
                        echo " failed"
                        exit 1
                fi

                wait_for_pid created $php_fpm_PID

                if [ -n "$try" ] ; then
                        echo " failed"
                        exit 1
                else
                        echo " done"
                fi
        ;;

        stop)
                echo -n "Shutting down php_fpm "

                if [ ! -r $php_fpm_PID ] ; then
                        echo "warning, no pid file found - php-fpm is not running ?"
                        exit 1
                fi

                kill -TERM `cat $php_fpm_PID`

                wait_for_pid removed $php_fpm_PID

                if [ -n "$try" ] ; then
                        echo " failed"
                        exit 1
                else
                        echo " done"
                fi
        ;;

        status)
                RETVAL="1"
                if [ -f "${php_fpm_PID}" ]; then
                  read kpid < $php_fpm_PID
                  if checkpid $kpid 2>&1; then
                    echo "$0 is already running (${kpid})"
                    RETVAL="0"
                  else
                    echo "lock file found but no process running for pid $kpid"
                  fi
                else
                  pid=$(pgrep -f "${php_fpm_BIN} --fpm --fpm-config ${php_fpm_CONF}")
                  if [ -n "$pid" ]; then
                  echo "$0 running (${pid}) but no PID file exists"
                  RETVAL="0"
                else
                  echo "$0 is stopped"
                fi
              fi
              exit $RETVAL
        ;;

        quit)
                echo -n "Gracefully shutting down php_fpm "

                if [ ! -r $php_fpm_PID ] ; then
                        echo "warning, no pid file found - php-fpm is not running ?"
                        exit 1
                fi

                kill -QUIT `cat $php_fpm_PID`

                wait_for_pid removed $php_fpm_PID

                if [ -n "$try" ] ; then
                        echo " failed"
                        exit 1
                else
                        echo " done"
                fi
        ;;

        restart)
                $0 stop
                $0 start
        ;;

        reload)

                echo -n "Reload service php-fpm "

                if [ ! -r $php_fpm_PID ] ; then
                        echo "warning, no pid file found - php-fpm is not running ?"
                        exit 1
                fi

                kill -USR2 `cat $php_fpm_PID`

                echo " done"
        ;;

        logrotate)

                echo -n "Re-opening php-fpm log file "

                if [ ! -r $php_fpm_PID ] ; then
                        echo "warning, no pid file found - php-fpm is not running ?"
                        exit 1
                fi

                kill -USR1 `cat $php_fpm_PID`

                echo " done"
        ;;

        *)
                echo "Usage: $0 {start|stop|quit|restart|reload|logrotate}"
                exit 1
        ;;

esac
